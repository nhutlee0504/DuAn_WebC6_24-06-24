@page "/productdetail/{id}"
@using Blazor.Shared.Model
@inject HttpClient httpclient
@inject IJSRuntime JSRuntime
<div class="container">
	@if (productitems != null)
	{
		<div class="row">
			<div class="col-md-7">
				<div class="row ">
					<div class="d-flex">
						<div class="col-md-9">
							<div class="justify-content-center" style="margin-right: 15px;">
								<img id="main-image" src="/@productitems.Image" alt="Alternate Text" class="w-100" style="border-radius: 25px;">
							</div>
						</div>
						<div class="col-md-3">
							@if (imagedetailitems != null && imagedetailitems.Any())
							{
								<div class="image-selection">
									@foreach (var img in imagedetailitems)
									{
										<div class="image-option">
											<input type="radio" id="image-@img.IDImage" name="image-options" value="@img.Image" class="radio-btn-image">
											<label for="image-@img.IDImage">
												<img src="/@img.Image" alt="Option @img.IDImage" class="w-75 img-thumbnail">
											</label>
										</div>
									}
								</div>
							}
						</div>
					</div>
				</div>
				<hr>
				<h3>THÔNG TIN SẢN PHẨM</h3>
				<h4>@productitems.Name</h4>
				<h6 class="text-secondary">
					@categoryitems.FirstOrDefault(y => y.IDCategory == productitems.IDCategory).Name -
					@supplieritems.FirstOrDefault(y => y.IDSupplier == productitems.IDSupplier).Name
					<p>@productitems.Describe</p>
				</h6>

			</div>
			<div class="col-md-5">

				<div class="card" style="background-color:#D9D9D9">
					<div class="card-body">
						<div class="container">
							<div class="row d-flex justify-content-between">
								<div class="">
									<div style="font-size:large">
									</div>
								</div>
								<div class="text-center">
									<div class="">
									</div>
								</div>
							</div>

							<div>
								<div class="font-weight-bold" style="font-size:large">Màu và kích cỡ:</div>
							</div>

							@*color and size*@
							<form method="post" asp-controller="Cart" asp-action="AddCart">
								<div class="row mb-3">
									@if (productdetailitems != null)
									{
										@foreach (var item in productdetailitems)
										{
											<div class="col-md-2">
												<!-- Thêm thuộc tính data-color để lưu mã màu của từng item -->
												<input class="radio-btn-size" type="radio" name="IdPDetail" id="@item.IDPDetail" value="@item.IDPDetail"/>
												<label for="@item.IDPDetail" class="font-weight-bold radio-btn-size" style="background-color: @coloritems.FirstOrDefault(y=>y.IDColor == item.IDColor).Color">
													@sizeitems.FirstOrDefault(y => y.IDSize == item.Size).SizeName
												</label>
											</div>
										}
									}
								</div>

								<div class="row">
									<div class="col-sm-12 d-flex justify-content-between">
										<div class="quantity-selector">
											<form>
												<button type="button" class="decrease-btn" @onclick="DecreaseQuantity">-</button>
												<input type="text" name="quantity" @bind="QuantityToAdd" class="quantity-input" readonly>
												<button type="button" class="increase-btn" @onclick="IncreaseQuantity">+</button>
											</form>
										</div>
										<div>
											<button type="button" class="btn add-cart" @onclick="AddCart">
												<i class="bi bi-bag-plus"></i>
												<div>Thêm vào giỏ hàng</div>
											</button>
										</div>
									</div>
								</div>
							</form>

						</div>
					</div>
				</div>
				<div class="">
					<hr>




					<div class="card mt-3" style="border 1px solid: black">
					</div>
				</div>
			</div>
		</div>
		<section style="background-color: #eee;">
			<div class="container py-3">
				<h3>Gợi ý sản phẩm</h3>
				<div class="row overflow-auto">
					@if (productitemsmany != null && categoryitems != null)
					{
						@foreach (var x in productitemsmany.Take(4))
						{
							<div class="col-md-6 col-lg-3 mb-4 mb-lg-0">
								<div class="card position-relative">
									<div class="bg-info position-absolute top-0 end-0 rounded-circle d-flex align-items-center justify-content-center shadow-1-strong m-3"
										 style="width: 35px; height: 35px;">
										<span class="text-white mb-0 small">
											<i class="bi bi-bag-heart"></i>
										</span>
									</div>
									<img src="/@x.Image" class="card-img-top custom-class-img" alt="Ao" />
									<div class="card-body">
										<div class="d-flex justify-content-between">
											<h5 class="mb-0">@x.Name</h5>
											<h5 class="text-dark mb-0">@x.Price.ToString("N0") đ</h5>
										</div>
										<div class="d-flex justify-content-between mb-0">
											<p class="small"><a href="#!" class="text-muted">@categoryitems.FirstOrDefault(z => z.IDCategory == x.IDCategory).Name</a></p>
										</div>
										<div class="d-flex align-items-center">

											<i class="fa fa-star text-warning me-2"></i>

											<p class="text-muted mb-0">4.9 <span class="fw-bold">(98)</span></p>

										</div>
									</div>
								</div>
							</div>
						}
					}
				</div>
			</div>
		</section>
	}
	else
	{
		<div class="spinner-border" role="status">
			<span class="visually-hidden">Loading...</span>
		</div>
	}

</div>
@code {
	[Parameter]
	public string id { get; set; }

	private Product productitems;
	private List<Product> productitemsmany;
	private List<Cart> cartItems;
	private List<ProductDetails> productdetailitems;
	private List<Sizes> sizeitems;
	private List<Colors> coloritems;
	private List<Category> categoryitems;
	private List<Supplier> supplieritems;
	private List<ImageDetails> imagedetailitems;
	private Product p = new Product();
	private ProductDetails pd = new ProductDetails();
	private Sizes s = new Sizes();
	private Colors cl = new Colors();
	private Category ct = new Category();
	private Supplier sp = new Supplier();
	private ImageDetails imd = new ImageDetails();
	private Cart c = new Cart();

	protected override async Task OnInitializedAsync()
	{
		try
		{
			productitemsmany = await httpclient.GetFromJsonAsync<List<Product>>("api/Product/GetProducts");
			productitems = await httpclient.GetFromJsonAsync<Product>($"api/Product/GetProduct/{id}");
			productdetailitems = await httpclient.GetFromJsonAsync<List<ProductDetails>>($"api/ProductDetail/GetPddtByProdId/{id}");
			sizeitems = await httpclient.GetFromJsonAsync<List<Sizes>>("api/Size/GetSizes");
			coloritems = await httpclient.GetFromJsonAsync<List<Colors>>("api/Color/GetColors");
			categoryitems = await httpclient.GetFromJsonAsync<List<Category>>("api/Category/GetCategories");
			supplieritems = await httpclient.GetFromJsonAsync<List<Supplier>>("api/Supplier/GetSuppliers");
			imagedetailitems = await httpclient.GetFromJsonAsync<List<ImageDetails>>($"api/ImageDetail/GetImageDetails/{id}");
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Error: {ex.Message}");
		}
		await base.OnInitializedAsync();
	}

	// Tạo một thuộc tính mới trong lớp CodeRazor:
	private int QuantityToAdd = 1;

	// Sửa phương thức IncreaseQuantity và DecreaseQuantity để cập nhật giá trị của QuantityToAdd thay vì selectedQuantity:
	private void IncreaseQuantity()
	{
		QuantityToAdd++;
	}

	private void DecreaseQuantity()
	{
		if (QuantityToAdd > 1)
		{
			QuantityToAdd--;
		}
	}

	private async Task AddCart()
	{
		// Lấy giá trị của IDPDetail
		var selectedIdPDetail = await JSRuntime.InvokeAsync<string>("eval", "document.querySelector('input[name=IdPDetail]:checked').value");

		// Lấy giá trị của quantity

		// Kiểm tra giá trị và thực hiện xử lý tiếp theo
		if (!string.IsNullOrEmpty(selectedIdPDetail))
		{
			// Tiếp tục thực hiện xử lý với selectedIdPDetail và selectedQuantity
			c.UserName = "Admin";
			c.IDPDetail = int.Parse(selectedIdPDetail);
			c.Quantity = QuantityToAdd;

			// Thực hiện POST request để thêm vào giỏ hàng
			await httpclient.PostAsJsonAsync<Cart>("api/Cart/AddCart", c);

			// Lấy danh sách cart cập nhật
			cartItems = await httpclient.GetFromJsonAsync<List<Cart>>("api/Cart/GetCarts");

			// Chuyển hướng người dùng đến trang giỏ hàng
			await JSRuntime.InvokeVoidAsync("window.location.assign", "/cartpage"); // Thay đổi "/cart" thành đường dẫn của trang giỏ hàng thực sự trong ứng dụng của bạn
		}
		else
		{
			// Xử lý khi không có giá trị được chọn
		}
	}
}
