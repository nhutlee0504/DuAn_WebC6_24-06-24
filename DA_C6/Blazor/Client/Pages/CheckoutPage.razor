@page "/checkout"
@using Blazor.Shared.Model
@inject HttpClient httpclient
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.WebUtilities
@using System.Text.Json
@inject IJSRuntime JSruntime
@inject IJSRuntime JSRuntime
<style>
    .breadcrumb-item a {
        color: #6c757d;
        text-decoration: none;
    }

    .form-section input {
        border-radius: 0.5rem; 
        border: 2px solid #6c757d; 
        padding: 0.5rem; 
        font-size: 1rem; 
    }

        .form-section input:read-only {
            background-color: #f8f9fa;
            color: #495057; 
        }

    .form-section .fw-bold {
        font-weight: 700; 
    }
    .modal {
    display: block;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
    z-index: 1050;
}
.modal-dialog {
    margin: 1.75rem auto;
}
.modal-content {
    background: #fff;
    border-radius: 0.3rem;
    box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
}
.modal-header, .modal-body, .modal-footer {
    padding: 1rem;
}
.modal-title {
    margin: 0;
}
.btn-close {
    background: none;
    border: none;
    font-size: 1.25rem;
}

</style>


<div class="container" style="margin-bottom: 200px">
    <h1>Thanh toán</h1>
    <ol class="breadcrumb bg-transparent">
        <li class="breadcrumb-item"><a href="">Trang chủ</a></li>
        <li class="breadcrumb-item"><a href="">Giỏ hàng</a></li>
        <li class="breadcrumb-item active" aria-current="page">Thanh toán</li>
    </ol>
    <div class="row">
        <div class="col-sm-6 d-flex flex-column">
            @if (acc != null)
            {
                <div class="card">
                    <div class="card-header bg-white">
                        <i class="bi bi-person-circle"></i>
                        Thông tin liên hệ
                    </div>
                    <div class="card-body">
                        <div class="form-section">
                            <div class="row">
                                <div class="col-md-6 mb-3">
                                    <label class="fw-bold">Số điện thoại</label>
                                    <input class="form-control" type="text" value="@acc.Phone" readonly />
                                </div>
                                <div class="col-md-6 mb-3">
                                    <label class="fw-bold">Email</label>
                                    <br />
                                    <input class="form-control" type="text" value="@acc.Email" readonly />
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="card mt-5">
                    <div class="card-header bg-white">
                        <img src="IMG/shipperaddress.png" alt="Alternate Text" />
                        Địa chỉ giao hàng
                    </div>
                    <div class="card-body">
                        <div class="form-section">
                            <div class="row">
                                <div class="col-md-6 mb-3">
                                    <label class="fw-bold">Họ tên</label>
                                    <br />
                                    <input class="form-control" type="text" value="@acc.Name" readonly />
                                </div>
                                <div class="col-md-6 mb-3">
                                    <label class="fw-bold">Địa chỉ</label>
                                    <br />
                                    <input class="form-control" type="text" value="@acc.Address" readonly />
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }

        </div>

        <div class="col-sm-6">
            <div class="container">
                <h2>Sản phẩm</h2>
                <hr />
                @if (selectedIDPDetails != null && selectedIDPDetails.Any())
                {
                    @foreach (var idpDetail in selectedIDPDetails)
                    {
                        var timspc = cartItems.FirstOrDefault(x => x.IDPDetail == idpDetail && x.UserName == LoggedInUser);
                        @if (timspc != null)
                        {
                            var timspd = productdetailitems.FirstOrDefault(x => x.IDPDetail == timspc.IDPDetail);
                            @if (timspd != null)
                            {
                                var timspp = productitems.FirstOrDefault(x => x.IDProduct == timspd.IDProduct);
                                @if (timspp != null)
                                {
                                    <div class="row mt-3 mb-3">
                                        <div class="col-sm-4">
                                            <img src="/@timspp.Image" alt="Alternate Text" class="mw-100" />
                                        </div>
                                        <div class="col-sm-8 flex-column">
                                            <p class="font-weight-bold">@timspp.Name</p>
                                            <p>@coloritems.FirstOrDefault(x => x.IDColor == timspd.IDColor).Color - @sizeitems.FirstOrDefault(x => x.IDSize == timspd.Size).SizeName</p>
                                            <div class="row">
                                                <div class="col-sm-6 font-weight-bold">(@timspc.Quantity)</div>
                                                <div class="col-sm-6">@((timspc.Quantity * timspp.Price).ToString("N0"))đ</div>
                                            </div>
                                        </div>
                                    </div>
                                    <hr>
                                }
                            }
                        }
                    }
                }

                <div class="row">
                    <div class="col-sm-4 font-weight-bold">Tổng cộng</div>
                    <div class="col-sm-8 font-weight-bold d-flex justify-content-end">@TotalPrice.ToString("N0")đ</div>
                </div>
                <div class="row">
                    <div class="col-sm-4 font-weight-bold">Phí vận chuyển</div>
                    <div class="col-sm-8 font-weight-bold d-flex justify-content-end">@ShippingFee.ToString("N0")đ</div>
                </div>

                <div class="row mt-3 mb-3">
                    <h5 class="col-sm-4 font-weight-bold">Tổng tiền</h5>
                    <h5 class="col-sm-8 font-weight-bold d-flex justify-content-end">@AllPrice.ToString("N0")đ</h5>
                </div>
                <div class="row mt-3 mb-3">
                    <input type="submit" class="btn btn-dark rounded-pill" value="Xác nhận" @onclick="HandlePayment" />
                </div>
            </div>
        </div>
    </div>
</div>
<!-- Modal -->
@if (_isPaymentSuccessful)
{
    <div class="modal fade show" tabindex="-1" style="display: block; padding-right: 17px;">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Thông Báo</h5>
                    <button type="button" class="btn-close" @onclick="() => _isPaymentSuccessful = false"></button>
                </div>
                <div class="modal-body">
                    <p>@_successMessage</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary">Về Trang Chủ</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<Cart> cartItems;
    private List<Product> productitems;
    private List<ProductDetails> productdetailitems;
    private List<Colors> coloritems;
    private List<Sizes> sizeitems;
    private decimal TotalPrice = 0;
    private decimal ShippingFee = 0;
    private decimal AllPrice = 0;
    private string LoggedInUser;
    private List<int> selectedIDPDetails;
    private Account acc;

    protected override async Task OnInitializedAsync()
    {
        LoggedInUser = await JSruntime.InvokeAsync<string>("localStorage.getItem", "LoggedInUser");
        var serializedValues = await JSruntime.InvokeAsync<string>("localStorage.getItem", "SelectedIDPDetails");
        selectedIDPDetails = JsonSerializer.Deserialize<List<int>>(serializedValues);
        acc = await httpclient.GetFromJsonAsync<Account>($"api/Account/GetUser/{LoggedInUser}");

        if (selectedIDPDetails != null && selectedIDPDetails.Any())
        {
            cartItems = await httpclient.GetFromJsonAsync<List<Cart>>("api/Cart/GetCarts");
            productitems = await httpclient.GetFromJsonAsync<List<Product>>("api/Product/GetProducts");
            productdetailitems = await httpclient.GetFromJsonAsync<List<ProductDetails>>("api/ProductDetail/GetProductDetails");
            coloritems = await httpclient.GetFromJsonAsync<List<Colors>>("api/Color/GetColors");
            sizeitems = await httpclient.GetFromJsonAsync<List<Sizes>>("api/Size/GetSizes");

            foreach (var idpDetail in selectedIDPDetails)
            {
                var timspc = cartItems.FirstOrDefault(x => x.IDPDetail == idpDetail && x.UserName == LoggedInUser);
                if (timspc != null)
                {
                    var timspd = productdetailitems.FirstOrDefault(x => x.IDPDetail == timspc.IDPDetail);
                    if (timspd != null)
                    {
                        var timspp = productitems.FirstOrDefault(x => x.IDProduct == timspd.IDProduct);
                        if (timspp != null)
                        {
                            TotalPrice += (timspc.Quantity * timspp.Price);
                        }
                        ShippingFee = TotalPrice * 0.03m;
                        AllPrice = ShippingFee + TotalPrice;
                    }
                }
            }
        }
    }
        private bool _isPaymentSuccessful;
        private string _successMessage;

        private async Task HandlePayment()
        {
            var paymentRequest = new PaymentRequest
            {
                Username = LoggedInUser,
                SelectedProducts = selectedIDPDetails,
                TotalPrice = TotalPrice
            };

            try
            {
                var response = await httpclient.PostAsJsonAsync("api/bill/pay", paymentRequest);

                if (response.IsSuccessStatusCode)
                {
                    _isPaymentSuccessful = true;
                    _successMessage = "Thanh toán thành công!";
                    StateHasChanged(); // Cập nhật giao diện người dùng
                }
                else
                {
                    var errorMessage = await response.Content.ReadAsStringAsync();
                    await JSRuntime.InvokeVoidAsync("alert", $"Xuất hiện lỗi trong quá trình thanh toán: {errorMessage}");
                }
            }
            catch (Exception ex)
            {
                // Log the exception or display a more detailed error message
                await JSRuntime.InvokeVoidAsync("alert", $"Lỗi không mong muốn: {ex.Message}");
            }
        }
   



    public class PaymentRequest
    {
        public string Username { get; set; }
        public List<int> SelectedProducts { get; set; }
        public decimal TotalPrice { get; set; }
    }
}

